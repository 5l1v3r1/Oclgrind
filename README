========
oclgrind
========

About
-----
This project implements a virtual OpenCL device simulator, including
an OpenCL runtime with ICD support. The goal is to provide a debugging
aid for OpenCL development. The simulator is built on an interpreter
for SPIR. This is a side-project is being undertaken by James Price (a
PhD student at the University of Bristol).


Project Status
--------------
At present (Nov'13), the simulator has demonstated the ability to run
many real OpenCL programs 'out-of-the-box'. The project also
demonstrates valgrind-style detection of memory access errors, and a
simple gdb-style debugging interface. However, there are still some
gaps in the implementation, and this project has not been thoroughly
tested on different platforms or with a large number of
applications. There is currently no timeline for an actual release,
although the v0.1 milestone on GitHub indicates a rough set of targets
desired for a beta candidate.

If you are using this project, you have likely been in contact with
the author already. If you haven't, but are interested, please use the
contact details below to get in touch.


Usage
-----
To use this project you will require a SPIR-capable version of
LLVM/Clang. Although SPIR functionality already exists in the LLVM
ToT, at present this project has only been tested with patches to the
LLVM 3.2 release that have been circulated internally in the Khronos
OpenCL working group (of which the author is a member).

The SPIR-capable LLVM headers and libraries need to be available in
CPLUS_INCLUDE_PATH, LIBRARY_PATH, {DY}LD_LIBRARY_PATH, and PATH. The
OpenCL C header file found at src/clc.h needs to be covered by a
directory in C_INCLUDE_PATH. An ICD entry point for oclgrind should be
created in /etc/OpenCL/vendors/ and pointed to liboclgrind.{so,dylib}.

Further instructions on running the simulator available on request.


Contact
-------
For more details about this project, please contact:
James Price <j.price@bristol.ac.uk>
